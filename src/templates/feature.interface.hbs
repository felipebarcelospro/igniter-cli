{{#each fields}}
{{#if relations}}
import type { {{pascalCase type}} } from '../{{kebabCase type}}/{{kebabCase type}}.interface';
{{/if}}
{{/each}}

/**
 * Represents a {{pascalCase name}} entity.
 */
export interface {{pascalCase name}} {
  {{#each fields}}
  {{#if isRelation}}
  {{#if isList}}
  /** Related {{pascalCase type}} entities */
  {{name}}?: {{pascalCase type}}[];
  {{else}}
  /** Related {{pascalCase type}} entity */
  {{name}}{{#if isOptional}}?{{/if}}: {{pascalCase type}};
  {{/if}}
  {{else}}
  /** {{pascalCase name}}'s {{name}} property */
  {{name}}: {{getTypeFormat type isRelation}}{{#if isOptional}}{{#unless hasDefault}}  | null{{/unless}}{{/if}};
  {{/if}}
  {{/each}}
}

/**
 * Data transfer object for creating a new {{pascalCase name}}.
 */
export interface Create{{pascalCase name}}DTO {
  {{#each fields}}
  {{#if isList}}
  /** Array of IDs for the {{pascalCase type}} relationships to be created */
  {{name}}Ids{{#if (equals relations.type 'one-to-many')}}?{{/if}}: string[];
  {{else}}
  {{#unless (equals name (concat (lowerCase ../name) "Id"))}}
  {{#unless isRelation}}
  /** {{pascalCase name}}'s {{name}} property  */
  {{name}}{{#if isOptional}}?{{/if}}: {{getTypeFormat type isRelation}}{{#if isOptional}} | null{{/if}};
  {{/unless}}
  {{/unless}}
  {{/if}}
  {{/each}}
}

/**
 * Data transfer object for updating an existing {{pascalCase name}}.
 */
export interface Update{{pascalCase name}}DTO {
  {{#each fields}}
  {{#if isList}}
  /** Array of IDs for the {{pascalCase type}} relationships to be created */
  {{name}}Ids?: string[];
  {{else}}
  {{#unless (equals name (concat (lowerCase ../name) "Id"))}}
  {{#unless isRelation}}
  /** {{pascalCase name}}'s {{name}} property  */
  {{name}}?: {{getTypeFormat type isRelation}}{{#if isOptional}} | null{{/if}};
  {{/unless}}
  {{/unless}}
  {{/if}}
  {{/each}}
}

/**
 * Query parameters for fetching Category entities
 */
export interface {{pascalCase name}}QueryParams {
  /** Current page number for pagination */
  page?: number;
  /** Number of items to return per page */
  limit?: number;
  /** Property to sort by */
  sortBy?: string;
  /** Sort order */
  sortOrder?: 'asc' | 'desc';
  /** Search term for filtering */
  search?: string;
}